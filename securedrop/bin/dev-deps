#!/bin/bash

export DISPLAY=:1

function run_tor {
    tor > /tmp/tor.out 2>&1 || cat /tmp/tor.out
}

function run_xvfb() {
    (setsid Xvfb :1 -screen 0 1024x768x24 -ac +extension GLX +render -noreset >& /tmp/xvfb.out || cat /tmp/xvfb.out) &

    # give it time to start
    for _ in {1..10}
    do
        xdpyinfo -display :1 >/dev/null 2>&1 && return 0
        sleep 1
    done
    xdpyinfo -display :1 >/dev/null 2>&1 || (echo "Xvfb is not available"; exit 1)
}

function run_redis() {
    setsid redis-server >& /tmp/redis.out || cat /tmp/redis.out
}

function run_supervisor() {
    mkdir -p /tmp/supervisor/log /tmp/supervisor/run && printf "[unix_http_server]\nfile=/tmp/supervisor/run/supervisor.sock\nchmod=0700\n\n[supervisord]logfile=/tmp/supervisor/log/supervisord.log\npidfile=/tmp/supervisor/run/supervisord.pid\nchildlogdir=/tmp/supervisor/log\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor/run/supervisor.sock\n\n[program:securedrop_worker]\ncommand=/opt/venvs/securedrop-app-code/bin/rqworker\ndirectory=$(pwd)\nautostart=true\nautorestart=true\nstartretries=3\nstderr_logfile=/tmp/supervisor/log/securedrop_worker.err\nstdout_logfile=/tmp/supervisor/log/securedrop_worker.out\nuser=%s\n" "$USER_NAME" > /tmp/supervisor/supervisor.conf

    setsid supervisord -c /tmp/supervisor/supervisor.conf >& /tmp/supervisor/log/supervisor.out || cat /tmp/supervisor/log/supervisor.out
}

function setup_vncauth {
    x11vnc -storepasswd freedom /tmp/vncpasswd
}

function run_x11vnc() {
    setsid x11vnc -display :1 -geometry 1024x768 -rfbauth /tmp/vncpasswd -rfbport 5909 -shared >& /tmp/x11vnc.out || cat /tmp/x11vnc.out
}

function urandom() {
    sudo rm /dev/random
    sudo ln -s /dev/urandom /dev/random
}

function append_to_exit() {
    local existing
    existing="$(trap | sed -n "/EXIT\$/s/^trap -- '\(.*\)' EXIT/\1/p")"
    trap "${existing:-true} ; $1" EXIT
}

function maybe_create_config_py() {
    REPOROOT=$(git rev-parse --show-toplevel)
    if ! test -f "${REPOROOT}/securedrop/config.py" ; then
        append_to_exit "rm ${REPOROOT}/securedrop/config.py"
        (cd "$REPOROOT" && make test-config)
    fi
}

function run_sass() {
    sass --stop-on-error sass:static/css --style compressed "$@"
}

function reset_demo() {
    # Set up gpg keys directory structure.
    sudo mkdir -p /var/lib/securedrop/{store,keys,tmp}
    sudo chown -R "$(id -u)" /var/lib/securedrop
    cp ./tests/files/test_journalist_key.pub /var/lib/securedrop/keys
    gpg2 --homedir /var/lib/securedrop/keys --import /var/lib/securedrop/keys/test_journalist_key.pub >& /tmp/gpg.out || cat /tmp/gpg.out

    # Create gpg-agent.conf
    echo allow-loopback-pinentry > /var/lib/securedrop/keys/gpg-agent.conf

    # Kill gpg-agent(s) if they exist so it picks up the new config on restart.
    pkill -f gpg-agent || true
    # Note that we should avoid `gpgconf --kill gpg-agent` since the pkill command will
    # handle killing multiple gpg-agent processes if they exist (this is what we want).

    # Set permissions on gpg-related directories/files.
    sudo chown -R "$(id -gn)" /var/lib/securedrop/keys
    chmod 700 /var/lib/securedrop/keys
    chmod 600 /var/lib/securedrop/keys/*

    # If the following directories exist, make sure they have the proper permissions.
    chmod -f 700 /var/lib/securedrop/keys/private-keys-v1.d || true
    chmod -f 700 /var/lib/securedrop/keys/openpgp-revocs.d || true

    # Generate translated strings
    ./i18n_tool.py translate-messages --compile

    # remove previously uploaded custom logos
    rm -f /var/www/securedrop/static/i/custom_logo.png

    # create an empty database
    sqlite3 /var/lib/securedrop/db.sqlite .databases &> /dev/null

    ./manage.py reset

    gpg2 --homedir /var/lib/securedrop/keys --import /var/lib/securedrop/keys/test_journalist_key.pub

    ./create-dev-data.py
}
